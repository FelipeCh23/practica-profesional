
"""
Script de optimizaci√≥n para dise√±os de tronadura en abanico.

Este programa implementa la l√≥gica de un diagrama de flujo para encontrar
el dise√±o de perforaci√≥n m√°s econ√≥mico que cumpla con un presupuesto dado.
Itera a trav√©s de un rango de posibles dise√±os, los genera geom√©tricamente,
calcula su costo y selecciona el mejor candidato.
"""
import numpy as np
import shapely as shp
import json

# ===========================================================================
# SECCI√ìN 1: FUNCIONES GEOM√âTRICAS AUXILIARES (Adaptadas de appRing.py)
# ===========================================================================

def sort_points(geometry, pivot: shp.Point):
    """
    Ordena los puntos de una geometr√≠a desde el m√°s cercano al m√°s lejano al pivote.

    Args:
        geometry: Una geometr√≠a de Shapely (ej. MultiPoint).
        pivot (shp.Point): El punto de referencia para medir la distancia.

    Returns:
        list: Una lista de puntos de Shapely ordenados.
    """
    points = list(shp.extract_unique_points(geometry).geoms)
    points.sort(key=lambda point: point.distance(pivot))
    return points

# ===========================================================================
# SECCI√ìN 2: L√ìGICA DE GENERACI√ìN DE DISE√ëOS (Adaptada de HolesDesigner)
# ===========================================================================

def find_endpoints(stope: shp.Polygon, drift: shp.Polygon, pivot: shp.Point, line: shp.LineString, max_length: float):
    """
    Halla el collar (inicio en la galer√≠a) y el fondo (fin en el caser√≥n o largo m√°x.) de una perforaci√≥n.

    Args:
        stope (shp.Polygon): Pol√≠gono del caser√≥n.
        drift (shp.Polygon): Pol√≠gono de la galer√≠a.
        pivot (shp.Point): Punto de origen de la perforaci√≥n.
        line (shp.LineString): L√≠nea directriz que define el √°ngulo del tiro.
        max_length (float): Longitud m√°xima permitida para la perforaci√≥n.

    Returns:
        tuple: Una tupla con el punto de collar y el punto de fondo (o None si es inv√°lido).
    """
    collar = line.intersection(drift.exterior)
    if collar.is_empty:
        return None, None # La l√≠nea no cruza la galer√≠a, tiro inv√°lido.

    # El punto de collar puede ser una geometr√≠a compleja si cruza en una esquina
    if not isinstance(collar, shp.Point):
        collar = collar.geoms[0]

    # Intersecci√≥n con el caser√≥n
    intersections = line.intersection(stope.exterior)
    
    if intersections.is_empty:
        # Si no hay intersecci√≥n, el tiro no llega al caser√≥n. Podr√≠amos descartarlo o usar largo m√°x.
        # Por ahora, lo descartamos para asegurar que todos los tiros lleguen al objetivo.
        return None, None

    # Ordenamos las intersecciones para quedarnos con la m√°s lejana al pivote
    toe = sort_points(intersections, pivot)[-1]

    # Verificamos que el tiro no exceda la longitud m√°xima
    if pivot.distance(toe) > max_length:
        toe = line.interpolate(max_length + pivot.distance(collar))

    return collar, toe

def angular_method(stope_geom, drift_geom, pivot_geom, params):
    """
    Genera un abanico de perforaci√≥n usando espaciamiento angular constante.

    Args:
        stope_geom (list): Coordenadas del pol√≠gono del caser√≥n.
        drift_geom (list): Coordenadas del pol√≠gono de la galer√≠a.
        pivot_geom (list): Coordenadas del punto pivote.
        params (dict): Diccionario con par√°metros de dise√±o ('min_angle', 'max_angle', 'holes_number', 'max_length').

    Returns:
        dict: Un diccionario con la geometr√≠a de los tiros generados.
    """
    collars, toes = [], []
    stope = shp.Polygon(stope_geom)
    drift = shp.Polygon(drift_geom)
    pivot = shp.Point(pivot_geom)

    angle_range = abs(params['max_angle'] - params['min_angle'])
    
    if params['holes_number'] > 1:
        angle_step = angle_range / (params['holes_number'] - 1)
    else:
        angle_step = 0

    current_angle = params['min_angle']

    for _ in range(params['holes_number']):
        # Se crea una l√≠nea de referencia muy larga y se rota al √°ngulo deseado
        ref_line = shp.LineString([pivot, (pivot.x, pivot.y + 10000)])
        rotated_line = shp.affinity.rotate(ref_line, angle=current_angle, origin=pivot)

        collar, toe = find_endpoints(stope, drift, pivot, rotated_line, params['max_length'])

        if collar and toe:
            collars.append(list(collar.coords)[0])
            toes.append(list(toe.coords)[0])

        current_angle += angle_step

    return {"geometry": [collars, toes]}

# ===========================================================================
# SECCI√ìN 3: L√ìGICA DE C√ÅLCULO DE COSTOS
# ===========================================================================

def calculate_total_cost(design: dict, unit_costs: dict) -> float:
    """
    Calcula el costo total de un dise√±o (perforaci√≥n, explosivos, detonadores).

    Args:
        design (dict): Objeto de dise√±o completo.
        unit_costs (dict): Diccionario con los precios unitarios.

    Returns:
        float: El costo total calculado.
    """
    # 1. Costo de Perforaci√≥n
    total_drill_length = 0
    if 'holes' in design and design['holes']['geometry'][0]:
        collars = np.array(design['holes']['geometry'][0])
        toes = np.array(design['holes']['geometry'][1])
        total_drill_length = np.sum(np.linalg.norm(toes - collars, axis=1))
    
    cost_drilling = total_drill_length * unit_costs['perforacion_por_metro']

    # 2. Costo de Explosivos (A√öN NO IMPLEMENTADO - SIMPLIFICADO)
    cost_explosives = 0.0
    
    # 3. Costo de Detonadores (simplificado, un detonador por tiro)
    num_detonators = len(design.get('holes', {}).get('geometry', [[]])[0])
    cost_detonators = num_detonators * unit_costs['detonador_por_unidad']

    return cost_drilling + cost_explosives + cost_detonators

# ===========================================================================
# SECCI√ìN 4: EL OPTIMIZADOR (Implementaci√≥n del Diagrama de Flujo)
# ===========================================================================

def optimize_fan_design(stope_geom, drift_geom, pivot_geom, budget_params):
    """
    Bucle principal que itera para encontrar el mejor dise√±o de abanico.

    Args:
        stope_geom (list): Coordenadas del pol√≠gono del caser√≥n.
        drift_geom (list): Coordenadas del pol√≠gono de la galer√≠a.
        pivot_geom (list): Coordenadas del punto pivote.
        budget_params (dict): Par√°metros de presupuesto y optimizaci√≥n.

    Returns:
        dict: El mejor dise√±o encontrado que cumple con el presupuesto, o None si no se encuentra ninguno.
    """
    valid_designs = []
    
    # Interpretamos Smin y Smax como el n√∫mero m√≠nimo y m√°ximo de tiros a probar
    s_min_tiros = budget_params['s_min_tiros']
    s_max_tiros = budget_params['s_max_tiros']
    
    print(f"üöÄ Iniciando optimizaci√≥n. Probando de {s_min_tiros} a {s_max_tiros} tiros...")

    for num_tiros in range(s_min_tiros, s_max_tiros + 1):
        
        print(f"\n--- Probando dise√±o con {num_tiros} tiros ---")
        
        # 1. CONSTRUIR EL DISE√ëO usando el m√©todo angular
        design_params = {
            'min_angle': -45.0,
            'max_angle': 45.0,
            'max_length': 30.0, # Longitud m√°xima de perforaci√≥n en metros
            'holes_number': num_tiros
        }
        
        holes_design = angular_method(stope_geom, drift_geom, pivot_geom, design_params)
        
        # Ensamblamos un objeto de dise√±o completo (simplificado)
        current_design = {
            "holes": holes_design,
            # Aqu√≠ se generar√≠an 'charges' y 'blasts' en una versi√≥n m√°s completa
        }

        # 2. CALCULAR EL COSTO
        total_cost = calculate_total_cost(current_design, budget_params['unit_costs'])
        print(f"Costo del dise√±o generado: ${total_cost:,.2f}")

        # 3. VERIFICAR PRESUPUESTO
        if total_cost <= budget_params['presupuesto_maximo']:
            print(f"‚úÖ Dise√±o V√ÅLIDO (dentro del presupuesto de ${budget_params['presupuesto_maximo']:,.2f})")
            valid_designs.append({'design': current_design, 'cost': total_cost})
        else:
            print(f"‚ùå Dise√±o INV√ÅLIDO (excede el presupuesto)")

    # 4. SELECCIONAR EL MEJOR DISE√ëO
    if not valid_designs:
        print("\nNo se encontr√≥ ning√∫n dise√±o que cumpliera con el presupuesto.")
        return None
    
    # Criterio de optimizaci√≥n: el m√°s barato de los v√°lidos
    best_design = min(valid_designs, key=lambda x: x['cost'])
    
    print("\n=========================================")
    print("üèÜ Optimizaci√≥n Finalizada üèÜ")
    print(f"Se encontraron {len(valid_designs)} dise√±os v√°lidos.")
    
    best_design_info = best_design['design']['holes']
    num_tiros_optimo = len(best_design_info['geometry'][0])
    costo_optimo = best_design['cost']
    
    print(f"El mejor dise√±o tiene {num_tiros_optimo} tiros y un costo de ${costo_optimo:,.2f}")
    print("=========================================")
    
    return best_design

# ===========================================================================
# SECCI√ìN 5: EJECUCI√ìN DEL SCRIPT
# ===========================================================================

if __name__ == '__main__':
    # --- PAR√ÅMETROS DE ENTRADA (¬°Puedes modificar estos valores!) ---
    
    # 1. Geometr√≠as
    stope_polygon = [[0,0], [25,0], [25,35], [0,35]]
    drift_polygon = [[10,12], [15,12], [15,16], [10,16]]
    pivot_point = [12.5, 14]

    # 2. Par√°metros de Presupuesto y Optimizaci√≥n
    budget_parameters = {
        "presupuesto_maximo": 15000.0,
        "s_min_tiros": 5,  # N√∫mero M√çNIMO de tiros a probar
        "s_max_tiros": 15, # N√∫mero M√ÅXIMO de tiros a probar
        "unit_costs": {
            "perforacion_por_metro": 30.0,
            "explosivo_por_kg": 2.2, # A√∫n no se usa en el c√°lculo
            "detonador_por_unidad": 18.0
        }
    }
    
    # --- EJECUTAR EL OPTIMIZADOR ---
    resultado_optimo = optimize_fan_design(stope_polygon, drift_polygon, pivot_point, budget_parameters)

    # --- GUARDAR EL RESULTADO ---
    if resultado_optimo:
        try:
            with open('mejor_diseno.json', 'w') as f:
                # Guardamos solo el diccionario del dise√±o, no el costo.
                json.dump(resultado_optimo['design'], f, indent=4)
            print("\nEl mejor dise√±o se ha guardado en el archivo 'mejor_diseno.json'")
        except Exception as e:
            print(f"\nNo se pudo guardar el archivo de resultado. Error: {e}")